#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');

const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

/**
 * Get port from environment and store in Express.
 */


function normalizePort(val) {
  const port = parseInt(val, 10);
  if (Number.isNaN(port)) {

    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}


const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

function listener() {
 // const addr = server.address();
 // console.log(`addr ${addr}`);
 // const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening on ${port}`);
}



function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}


if(cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  for (let i = 0; i < numCPUs; i += 1) {
    cluster.fork();
  }
  cluster.on('exit', (worker) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  const server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', listener);
  console.log(`Worker ${process.pid} started`);
  
}
